package cn.zhanghub.designPattern.principle.DependenceInversionPrinciple;

/**
 * 类描述：依赖倒置原则
 *  高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象
 *  - 其核心思想是：要面向接口编程，不要面向实现编程。
 *
 * >由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。
 * >这里的抽象指的是接口或者抽象类，而细节是指具体的实现类。
 *
 * >使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成。
 *
 *  1. 依赖、倒置原则的作用
 *    - 降低类间的耦合性。
 *    - 提高系统的稳定性。
 *    - 减少并行开发引起的风险。
 *    - 提高代码的可读性和可维护性。
 *
 *  2. 依赖倒置原则的实现方法
 *    依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则。
 *    - 每个类尽量提供接口或抽象类，或者两者都具备。
 *    - 变量的声明类型尽量是接口或者是抽象类。
 *    - 任何类都不应该从具体类派生。
 *    - 使用继承时尽量遵循里氏替换原则。
 *
 *  3. 依赖传递的三种方式
 *      1) 接口传递
 *      2) 构造方法传递
 *      3) setter方式传递
 *
 *
 * @ClassName DIP
 * @Author 张文军
 * @Date 2021/4/23 17:23
 * @Version 1.0
 */

public class DIP {
}
